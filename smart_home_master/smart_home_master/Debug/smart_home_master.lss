
smart_home_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  000006be  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800146  00800146  00000838  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c8  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095c  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b46  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072d  00000000  00000000  0000389f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 34       	cpi	r26, 0x46	; 70
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e4       	ldi	r26, 0x46	; 70
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 34       	cpi	r26, 0x4C	; 76
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 02 	call	0x4fc	; 0x4fc <main>
  8a:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_init>:

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	87 bb       	out	0x17, r24	; 23
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	87 bb       	out	0x17, r24	; 23
	KEYPAD_PORT = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	08 95       	ret

000000a4 <Keypad_getkey>:
}

char Keypad_getkey(){
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
	int i,j;
	for (i = 0; i < 4; i++){
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	9d c0       	rjmp	.+314    	; 0x1ec <Keypad_getkey+0x148>
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
  b2:	38 b3       	in	r19, 0x18	; 24
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	8c 01       	movw	r16, r24
  be:	00 80       	ld	r0, Z
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <Keypad_getkey+0x22>
  c2:	00 0f       	add	r16, r16
  c4:	11 1f       	adc	r17, r17
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <Keypad_getkey+0x1e>
  ca:	ec 01       	movw	r28, r24
  cc:	02 80       	ldd	r0, Z+2	; 0x02
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <Keypad_getkey+0x30>
  d0:	cc 0f       	add	r28, r28
  d2:	dd 1f       	adc	r29, r29
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <Keypad_getkey+0x2c>
  d8:	dc 01       	movw	r26, r24
  da:	04 80       	ldd	r0, Z+4	; 0x04
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <Keypad_getkey+0x3e>
  de:	aa 0f       	add	r26, r26
  e0:	bb 1f       	adc	r27, r27
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <Keypad_getkey+0x3a>
  e6:	bc 01       	movw	r22, r24
  e8:	06 80       	ldd	r0, Z+6	; 0x06
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Keypad_getkey+0x4c>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <Keypad_getkey+0x48>
  f4:	2c 2f       	mov	r18, r28
  f6:	20 2b       	or	r18, r16
  f8:	2a 2b       	or	r18, r26
  fa:	26 2b       	or	r18, r22
  fc:	23 2b       	or	r18, r19
  fe:	28 bb       	out	0x18, r18	; 24
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
 100:	28 b3       	in	r18, 0x18	; 24
 102:	fa 01       	movw	r30, r20
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	00 80       	ld	r0, Z
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Keypad_getkey+0x70>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <Keypad_getkey+0x6c>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	88 bb       	out	0x18, r24	; 24
		for(j = 0; j < 4; j++){
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	5e c0       	rjmp	.+188    	; 0x1e0 <Keypad_getkey+0x13c>
			if (!(keypadPIN & (1 << Key_padRow[j])))
 124:	86 b3       	in	r24, 0x16	; 22
 126:	fb 01       	movw	r30, r22
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e8 59       	subi	r30, 0x98	; 152
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	20 81       	ld	r18, Z
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 2e       	mov	r0, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <Keypad_getkey+0x98>
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <Keypad_getkey+0x94>
 140:	80 fd       	sbrc	r24, 0
 142:	4c c0       	rjmp	.+152    	; 0x1dc <Keypad_getkey+0x138>
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
 144:	86 b3       	in	r24, 0x16	; 22
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 2e       	mov	r0, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <Keypad_getkey+0xac>
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <Keypad_getkey+0xa8>
 154:	80 ff       	sbrs	r24, 0
 156:	f6 cf       	rjmp	.-20     	; 0x144 <Keypad_getkey+0xa0>
				switch(i){
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	51 05       	cpc	r21, r1
 15c:	c9 f0       	breq	.+50     	; 0x190 <Keypad_getkey+0xec>
 15e:	24 f4       	brge	.+8      	; 0x168 <Keypad_getkey+0xc4>
 160:	41 15       	cp	r20, r1
 162:	51 05       	cpc	r21, r1
 164:	41 f0       	breq	.+16     	; 0x176 <Keypad_getkey+0xd2>
 166:	3a c0       	rjmp	.+116    	; 0x1dc <Keypad_getkey+0x138>
 168:	42 30       	cpi	r20, 0x02	; 2
 16a:	51 05       	cpc	r21, r1
 16c:	f1 f0       	breq	.+60     	; 0x1aa <Keypad_getkey+0x106>
 16e:	43 30       	cpi	r20, 0x03	; 3
 170:	51 05       	cpc	r21, r1
 172:	41 f1       	breq	.+80     	; 0x1c4 <Keypad_getkey+0x120>
 174:	33 c0       	rjmp	.+102    	; 0x1dc <Keypad_getkey+0x138>
					case (0):
						if (j == 0) return '7';
 176:	61 15       	cp	r22, r1
 178:	71 05       	cpc	r23, r1
 17a:	f1 f1       	breq	.+124    	; 0x1f8 <Keypad_getkey+0x154>
						else if (j == 1) return '4';
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	71 05       	cpc	r23, r1
 180:	e9 f1       	breq	.+122    	; 0x1fc <Keypad_getkey+0x158>
						else if (j == 2) return '1';
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	71 05       	cpc	r23, r1
 186:	e1 f1       	breq	.+120    	; 0x200 <Keypad_getkey+0x15c>
						else if (j == 3) return '?';
 188:	63 30       	cpi	r22, 0x03	; 3
 18a:	71 05       	cpc	r23, r1
 18c:	39 f5       	brne	.+78     	; 0x1dc <Keypad_getkey+0x138>
 18e:	3a c0       	rjmp	.+116    	; 0x204 <Keypad_getkey+0x160>
						break;
					case (1):
						if (j == 0) return '8';
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	c9 f1       	breq	.+114    	; 0x208 <Keypad_getkey+0x164>
						else if (j == 1) return '5';
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	71 05       	cpc	r23, r1
 19a:	c1 f1       	breq	.+112    	; 0x20c <Keypad_getkey+0x168>
						else if (j == 2) return '2';
 19c:	62 30       	cpi	r22, 0x02	; 2
 19e:	71 05       	cpc	r23, r1
 1a0:	b9 f1       	breq	.+110    	; 0x210 <Keypad_getkey+0x16c>
						else if (j == 3) return '0';
 1a2:	63 30       	cpi	r22, 0x03	; 3
 1a4:	71 05       	cpc	r23, r1
 1a6:	d1 f4       	brne	.+52     	; 0x1dc <Keypad_getkey+0x138>
 1a8:	35 c0       	rjmp	.+106    	; 0x214 <Keypad_getkey+0x170>
						break;
					case (2):
						if (j == 0) return '9';
 1aa:	61 15       	cp	r22, r1
 1ac:	71 05       	cpc	r23, r1
 1ae:	a1 f1       	breq	.+104    	; 0x218 <Keypad_getkey+0x174>
						else if (j == 1) return '6';
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	71 05       	cpc	r23, r1
 1b4:	99 f1       	breq	.+102    	; 0x21c <Keypad_getkey+0x178>
						else if (j == 2) return '3';
 1b6:	62 30       	cpi	r22, 0x02	; 2
 1b8:	71 05       	cpc	r23, r1
 1ba:	91 f1       	breq	.+100    	; 0x220 <Keypad_getkey+0x17c>
						else if (j == 3) return '=';
 1bc:	63 30       	cpi	r22, 0x03	; 3
 1be:	71 05       	cpc	r23, r1
 1c0:	69 f4       	brne	.+26     	; 0x1dc <Keypad_getkey+0x138>
 1c2:	30 c0       	rjmp	.+96     	; 0x224 <Keypad_getkey+0x180>
						break;
					case (3):
						if (j == 0) return '/';
 1c4:	61 15       	cp	r22, r1
 1c6:	71 05       	cpc	r23, r1
 1c8:	79 f1       	breq	.+94     	; 0x228 <Keypad_getkey+0x184>
						else if (j == 1) return '*';
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	71 05       	cpc	r23, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <Keypad_getkey+0x188>
						else if (j == 2) return '-';
 1d0:	62 30       	cpi	r22, 0x02	; 2
 1d2:	71 05       	cpc	r23, r1
 1d4:	69 f1       	breq	.+90     	; 0x230 <Keypad_getkey+0x18c>
						else if (j == 3) return '+';
 1d6:	63 30       	cpi	r22, 0x03	; 3
 1d8:	71 05       	cpc	r23, r1
 1da:	61 f1       	breq	.+88     	; 0x234 <Keypad_getkey+0x190>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	64 30       	cpi	r22, 0x04	; 4
 1e2:	71 05       	cpc	r23, r1
 1e4:	0c f4       	brge	.+2      	; 0x1e8 <Keypad_getkey+0x144>
 1e6:	9e cf       	rjmp	.-196    	; 0x124 <Keypad_getkey+0x80>
	KEYPAD_PORT = 0xFF;
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
 1e8:	4f 5f       	subi	r20, 0xFF	; 255
 1ea:	5f 4f       	sbci	r21, 0xFF	; 255
 1ec:	44 30       	cpi	r20, 0x04	; 4
 1ee:	51 05       	cpc	r21, r1
 1f0:	0c f4       	brge	.+2      	; 0x1f4 <Keypad_getkey+0x150>
 1f2:	5f cf       	rjmp	.-322    	; 0xb2 <Keypad_getkey+0xe>
						break;
				}
			}
		}
	}
	return 'A';
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	1f c0       	rjmp	.+62     	; 0x236 <Keypad_getkey+0x192>
			if (!(keypadPIN & (1 << Key_padRow[j])))
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
				switch(i){
					case (0):
						if (j == 0) return '7';
 1f8:	87 e3       	ldi	r24, 0x37	; 55
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 1) return '4';
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	1b c0       	rjmp	.+54     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 2) return '1';
 200:	81 e3       	ldi	r24, 0x31	; 49
 202:	19 c0       	rjmp	.+50     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 3) return '?';
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	17 c0       	rjmp	.+46     	; 0x236 <Keypad_getkey+0x192>
						break;
					case (1):
						if (j == 0) return '8';
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	15 c0       	rjmp	.+42     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 1) return '5';
 20c:	85 e3       	ldi	r24, 0x35	; 53
 20e:	13 c0       	rjmp	.+38     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 2) return '2';
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	11 c0       	rjmp	.+34     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 3) return '0';
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	0f c0       	rjmp	.+30     	; 0x236 <Keypad_getkey+0x192>
						break;
					case (2):
						if (j == 0) return '9';
 218:	89 e3       	ldi	r24, 0x39	; 57
 21a:	0d c0       	rjmp	.+26     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 1) return '6';
 21c:	86 e3       	ldi	r24, 0x36	; 54
 21e:	0b c0       	rjmp	.+22     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 2) return '3';
 220:	83 e3       	ldi	r24, 0x33	; 51
 222:	09 c0       	rjmp	.+18     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 3) return '=';
 224:	8d e3       	ldi	r24, 0x3D	; 61
 226:	07 c0       	rjmp	.+14     	; 0x236 <Keypad_getkey+0x192>
						break;
					case (3):
						if (j == 0) return '/';
 228:	8f e2       	ldi	r24, 0x2F	; 47
 22a:	05 c0       	rjmp	.+10     	; 0x236 <Keypad_getkey+0x192>
						else if (j == 1) return '*';
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	03 c0       	rjmp	.+6      	; 0x236 <Keypad_getkey+0x192>
						else if (j == 2) return '-';
 230:	8d e2       	ldi	r24, 0x2D	; 45
 232:	01 c0       	rjmp	.+2      	; 0x236 <Keypad_getkey+0x192>
						else if (j == 3) return '+';
 234:	8b e2       	ldi	r24, 0x2B	; 43
				}
			}
		}
	}
	return 'A';
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
 240:	85 b3       	in	r24, 0x15	; 21
 242:	81 60       	ori	r24, 0x01	; 1
 244:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	81 ee       	ldi	r24, 0xE1	; 225
 248:	94 e0       	ldi	r25, 0x04	; 4
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_lcd_kick+0xa>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_lcd_kick+0x10>
 250:	00 00       	nop
	_delay_ms(5);
	LCD_CTRL &= ~(1 << EN_SWITCH);
 252:	85 b3       	in	r24, 0x15	; 21
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	85 bb       	out	0x15, r24	; 21
 258:	08 95       	ret

0000025a <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
 25a:	8a b3       	in	r24, 0x1a	; 26
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
 260:	85 b3       	in	r24, 0x15	; 21
 262:	82 60       	ori	r24, 0x02	; 2
 264:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL &= ~(1 << RS_SWITCH);
 266:	85 b3       	in	r24, 0x15	; 21
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	85 bb       	out	0x15, r24	; 21
	LCD_lcd_kick();
 26c:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
 270:	8a b3       	in	r24, 0x1a	; 26
 272:	80 6f       	ori	r24, 0xF0	; 240
 274:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
 276:	85 b3       	in	r24, 0x15	; 21
 278:	8d 7f       	andi	r24, 0xFD	; 253
 27a:	85 bb       	out	0x15, r24	; 21
 27c:	08 95       	ret

0000027e <LCD_WRITE_COMMAND>:
	
}


void LCD_WRITE_COMMAND(unsigned char command){
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 282:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_check_lcd_isbusy>
	LCD_PORT = command;
 286:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
 288:	85 b3       	in	r24, 0x15	; 21
 28a:	89 7f       	andi	r24, 0xF9	; 249
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	89 ef       	ldi	r24, 0xF9	; 249
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WRITE_COMMAND+0x14>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WRITE_COMMAND+0x1a>
 298:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 29a:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
	LCD_lcd_kick ();
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
	#endif
}
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <LCD_clear_screen>:

#include "inc/lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_COMMAND>
 2a8:	08 95       	ret

000002aa <LCD_GOTO_XY>:
	LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(5);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	c8 2f       	mov	r28, r24
 2b0:	d6 2f       	mov	r29, r22
	if (line == 1)
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	31 f4       	brne	.+12     	; 0x2c2 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 2b6:	60 31       	cpi	r22, 0x10	; 16
 2b8:	20 f4       	brcc	.+8      	; 0x2c2 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	86 0f       	add	r24, r22
 2be:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 2c2:	c2 30       	cpi	r28, 0x02	; 2
 2c4:	31 f4       	brne	.+12     	; 0x2d2 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 2c6:	d0 31       	cpi	r29, 0x10	; 16
 2c8:	20 f4       	brcc	.+8      	; 0x2d2 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 2ca:	80 ec       	ldi	r24, 0xC0	; 192
 2cc:	8d 0f       	add	r24, r29
 2ce:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_COMMAND>
		}
	}
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <LCD_INIT>:
 2d8:	87 e8       	ldi	r24, 0x87	; 135
 2da:	93 e1       	ldi	r25, 0x13	; 19
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_INIT+0x4>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_INIT+0xa>
 2e2:	00 00       	nop

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2e4:	84 b3       	in	r24, 0x14	; 20
 2e6:	87 60       	ori	r24, 0x07	; 7
 2e8:	84 bb       	out	0x14, r24	; 20
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2ea:	85 b3       	in	r24, 0x15	; 21
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	85 bb       	out	0x15, r24	; 21
	DataDir_LCD_PORT = 0xFF;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	8a bb       	out	0x1a, r24	; 26
 2f4:	85 ea       	ldi	r24, 0xA5	; 165
 2f6:	9e e0       	ldi	r25, 0x0E	; 14
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_INIT+0x20>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_INIT+0x26>
 2fe:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 300:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE // 8-bit mode
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 304:	88 e3       	ldi	r24, 0x38	; 56
 306:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WRITE_COMMAND>
 31c:	08 95       	ret

0000031e <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 322:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_check_lcd_isbusy>
	LCD_PORT = character;
 326:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~(1 << RW_SWITCH);
 328:	85 b3       	in	r24, 0x15	; 21
 32a:	8d 7f       	andi	r24, 0xFD	; 253
 32c:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL |= (1 << RS_SWITCH);
 32e:	85 b3       	in	r24, 0x15	; 21
 330:	84 60       	ori	r24, 0x04	; 4
 332:	85 bb       	out	0x15, r24	; 21
 334:	89 ef       	ldi	r24, 0xF9	; 249
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <LCD_WRITE_CHAR+0x1a>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <LCD_WRITE_CHAR+0x20>
 33e:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 340:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	LCD_lcd_kick ();
	#endif
}
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	8c 01       	movw	r16, r24
	int count = 0;
 352:	c0 e0       	ldi	r28, 0x00	; 0
 354:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 356:	18 c0       	rjmp	.+48     	; 0x388 <LCD_WRITE_STRING+0x40>
		count++;
 358:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 35a:	0f 5f       	subi	r16, 0xFF	; 255
 35c:	1f 4f       	sbci	r17, 0xFF	; 255
 35e:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
		if (count == 16)
 362:	c0 31       	cpi	r28, 0x10	; 16
 364:	d1 05       	cpc	r29, r1
 366:	29 f4       	brne	.+10     	; 0x372 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
 370:	0b c0       	rjmp	.+22     	; 0x388 <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 372:	c0 32       	cpi	r28, 0x20	; 32
 374:	d1 05       	cpc	r29, r1
 376:	41 f4       	brne	.+16     	; 0x388 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 378:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
			count = 0;
 384:	c0 e0       	ldi	r28, 0x00	; 0
 386:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 388:	f8 01       	movw	r30, r16
 38a:	80 81       	ld	r24, Z
 38c:	81 11       	cpse	r24, r1
 38e:	e4 cf       	rjmp	.-56     	; 0x358 <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <ENTER_PASS>:
unsigned char key_pressed;
uint8_t screen[4];
uint8_t count=0;
uint8_t users[2][2][4] = {{"123", "456"}, {"111", "000"}};
uint8_t ENTER_PASS(char* string)
{
 39a:	cf 93       	push	r28
	LCD_WRITE_STRING(string);
 39c:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
		   LCD_GOTO_XY(2,0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>

	uint8_t c=3;
 3a8:	c3 e0       	ldi	r28, 0x03	; 3
	while (1&&c){
 3aa:	32 c0       	rjmp	.+100    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		key_pressed = Keypad_getkey();
 3ac:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getkey>
 3b0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <key_pressed>
		switch(key_pressed){
 3b4:	8f 33       	cpi	r24, 0x3F	; 63
 3b6:	19 f0       	breq	.+6      	; 0x3be <ENTER_PASS+0x24>
 3b8:	81 34       	cpi	r24, 0x41	; 65
 3ba:	51 f1       	breq	.+84     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3bc:	16 c0       	rjmp	.+44     	; 0x3ea <ENTER_PASS+0x50>
			case 'A':
			break;
			case '?':
			if (count)
 3be:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
 3c2:	66 23       	and	r22, r22
 3c4:	29 f1       	breq	.+74     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			{
				c++;
 3c6:	cf 5f       	subi	r28, 0xFF	; 255
				count--;
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	86 0f       	add	r24, r22
 3cc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
				LCD_GOTO_XY(2, count + 1);
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
				LCD_WRITE_CHAR(' ');
 3d6:	80 e2       	ldi	r24, 0x20	; 32
 3d8:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
				LCD_GOTO_XY(2, count + 1);
 3dc:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
 3e0:	6f 5f       	subi	r22, 0xFF	; 255
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
 3e8:	13 c0       	rjmp	.+38     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			}
			break;
			default:
			if (count<3){
 3ea:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
 3ee:	63 30       	cpi	r22, 0x03	; 3
 3f0:	78 f4       	brcc	.+30     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
				c--;
 3f2:	c1 50       	subi	r28, 0x01	; 1
				screen[count] = key_pressed;
 3f4:	e6 2f       	mov	r30, r22
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	e9 5b       	subi	r30, 0xB9	; 185
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	80 83       	st	Z, r24
				count++;
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <__data_end>
				LCD_GOTO_XY(2, count);
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
				LCD_WRITE_CHAR('*');
 40a:	8a e2       	ldi	r24, 0x2A	; 42
 40c:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
{
	LCD_WRITE_STRING(string);
		   LCD_GOTO_XY(2,0);

	uint8_t c=3;
	while (1&&c){
 410:	c1 11       	cpse	r28, r1
 412:	cc cf       	rjmp	.-104    	; 0x3ac <ENTER_PASS+0x12>
			}
			break;
		}
		
	}
	count=0;
 414:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
	LCD_clear_screen();
 418:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
    if (strcmp((char*)screen, (char*)users[0][1]) == 0 || strcmp((char*)screen, (char*)users[1][1]) == 0) 
 41c:	64 e7       	ldi	r22, 0x74	; 116
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	87 e4       	ldi	r24, 0x47	; 71
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 54 03 	call	0x6a8	; 0x6a8 <strcmp>
 428:	89 2b       	or	r24, r25
 42a:	51 f0       	breq	.+20     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 42c:	6c e7       	ldi	r22, 0x7C	; 124
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	87 e4       	ldi	r24, 0x47	; 71
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 54 03 	call	0x6a8	; 0x6a8 <strcmp>
 438:	89 2b       	or	r24, r25
 43a:	21 f4       	brne	.+8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	return 0;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	03 c0       	rjmp	.+6      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	01 c0       	rjmp	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	return -1;
 444:	8f ef       	ldi	r24, 0xFF	; 255
}
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <ENTER>:
uint8_t ENTER(char* string)
{
 44a:	cf 93       	push	r28
	LCD_WRITE_STRING(string);
 44c:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
		   LCD_GOTO_XY(2,0);
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>

	uint8_t c=3;
 458:	c3 e0       	ldi	r28, 0x03	; 3
	while (1&&c){
 45a:	33 c0       	rjmp	.+102    	; 0x4c2 <ENTER+0x78>
	key_pressed = Keypad_getkey();
 45c:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getkey>
 460:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <key_pressed>
	switch(key_pressed){
 464:	8f 33       	cpi	r24, 0x3F	; 63
 466:	19 f0       	breq	.+6      	; 0x46e <ENTER+0x24>
 468:	81 34       	cpi	r24, 0x41	; 65
 46a:	59 f1       	breq	.+86     	; 0x4c2 <ENTER+0x78>
 46c:	16 c0       	rjmp	.+44     	; 0x49a <ENTER+0x50>
		case 'A':
		break;
		case '?':
		if (count)
 46e:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
 472:	66 23       	and	r22, r22
 474:	31 f1       	breq	.+76     	; 0x4c2 <ENTER+0x78>
		{
			c++;
 476:	cf 5f       	subi	r28, 0xFF	; 255
			count--;
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	86 0f       	add	r24, r22
 47c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
		LCD_GOTO_XY(2, count + 1);
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
		LCD_WRITE_CHAR(' ');
 486:	80 e2       	ldi	r24, 0x20	; 32
 488:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
		LCD_GOTO_XY(2, count + 1);
 48c:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
 490:	6f 5f       	subi	r22, 0xFF	; 255
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
 498:	14 c0       	rjmp	.+40     	; 0x4c2 <ENTER+0x78>
		}
		break;
		default:
		if (count<3){
 49a:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
 49e:	63 30       	cpi	r22, 0x03	; 3
 4a0:	80 f4       	brcc	.+32     	; 0x4c2 <ENTER+0x78>
			c--;
 4a2:	c1 50       	subi	r28, 0x01	; 1
			screen[count] = key_pressed;
 4a4:	e6 2f       	mov	r30, r22
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	e9 5b       	subi	r30, 0xB9	; 185
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	80 83       	st	Z, r24
			count++;
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <__data_end>
			LCD_GOTO_XY(2, count);
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
			LCD_WRITE_CHAR(key_pressed);
 4ba:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <key_pressed>
 4be:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
{
	LCD_WRITE_STRING(string);
		   LCD_GOTO_XY(2,0);

	uint8_t c=3;
	while (1&&c){
 4c2:	c1 11       	cpse	r28, r1
 4c4:	cb cf       	rjmp	.-106    	; 0x45c <ENTER+0x12>
		}
		break;
	}
	
	}
	LCD_clear_screen();
 4c6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
	count=0;
 4ca:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
    if (strcmp((char*)screen, (char*)users[0][0]) == 0 || strcmp((char*)screen, (char*)users[1][0]) == 0) 
 4ce:	60 e7       	ldi	r22, 0x70	; 112
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	87 e4       	ldi	r24, 0x47	; 71
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <strcmp>
 4da:	89 2b       	or	r24, r25
 4dc:	51 f0       	breq	.+20     	; 0x4f2 <ENTER+0xa8>
 4de:	68 e7       	ldi	r22, 0x78	; 120
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	87 e4       	ldi	r24, 0x47	; 71
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <strcmp>
 4ea:	89 2b       	or	r24, r25
 4ec:	21 f4       	brne	.+8      	; 0x4f6 <ENTER+0xac>
	return 0;
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <ENTER+0xae>
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <ENTER+0xae>
	return -1;
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
}
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <main>:
int main(void)
{
	UART_INIT();
 4fc:	0e 94 40 03 	call	0x680	; 0x680 <UART_INIT>
   LCD_INIT();
 500:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_INIT>
   Keypad_init();   
 504:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_init>
  count=0;
   while(1){	   

	   count=0;
 508:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
	   
	   LCD_clear_screen();
 50c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
	   LCD_WRITE_STRING("Hello visitor!");
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 518:	2f e3       	ldi	r18, 0x3F	; 63
 51a:	8d e0       	ldi	r24, 0x0D	; 13
 51c:	93 e0       	ldi	r25, 0x03	; 3
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	80 40       	sbci	r24, 0x00	; 0
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <main+0x22>
 526:	00 c0       	rjmp	.+0      	; 0x528 <main+0x2c>
 528:	00 00       	nop
	   _delay_ms(1000);
	   LCD_clear_screen();
 52a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
	   
	   if (ENTER("Enter your id :")!=0)	   {
 52e:	8f e8       	ldi	r24, 0x8F	; 143
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 25 02 	call	0x44a	; 0x44a <ENTER>
 536:	88 23       	and	r24, r24
 538:	d1 f1       	breq	.+116    	; 0x5ae <main+0xb2>
		   
			   LCD_WRITE_STRING("wrong Id!!!!");
 53a:	8f e9       	ldi	r24, 0x9F	; 159
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
			   LCD_GOTO_XY(2,0);
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
			   LCD_WRITE_STRING(" closed...");
 54a:	8c ea       	ldi	r24, 0xAC	; 172
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 552:	2f e3       	ldi	r18, 0x3F	; 63
 554:	8d e0       	ldi	r24, 0x0D	; 13
 556:	93 e0       	ldi	r25, 0x03	; 3
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <main+0x5c>
 560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x66>
 562:	00 00       	nop
			  break;
		  }
	  }
	   
   
   }
 564:	d1 cf       	rjmp	.-94     	; 0x508 <main+0xc>
	   }
	   
	   uint8_t c=3;
	   while (c--)
	   {
		   if (ENTER_PASS("Enter your pass")!=0)
 566:	87 eb       	ldi	r24, 0xB7	; 183
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 cd 01 	call	0x39a	; 0x39a <ENTER_PASS>
 56e:	88 23       	and	r24, r24
 570:	71 f0       	breq	.+28     	; 0x58e <main+0x92>
		   {
			   LCD_WRITE_STRING("Wrong password");
 572:	87 ec       	ldi	r24, 0xC7	; 199
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 57a:	87 ea       	ldi	r24, 0xA7	; 167
 57c:	91 e6       	ldi	r25, 0x61	; 97
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <main+0x82>
 582:	00 c0       	rjmp	.+0      	; 0x584 <main+0x88>
 584:	00 00       	nop
			   _delay_ms(100);
			   LCD_clear_screen();
 586:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
			   continue;
		   
	   }
	   
	   uint8_t c=3;
	   while (c--)
 58a:	8c 2f       	mov	r24, r28
		   if (ENTER_PASS("Enter your pass")!=0)
		   {
			   LCD_WRITE_STRING("Wrong password");
			   _delay_ms(100);
			   LCD_clear_screen();
			   continue;
 58c:	11 c0       	rjmp	.+34     	; 0x5b0 <main+0xb4>
		   }
		   LCD_WRITE_STRING("in system.");
 58e:	86 ed       	ldi	r24, 0xD6	; 214
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 596:	9f e3       	ldi	r25, 0x3F	; 63
 598:	2d e0       	ldi	r18, 0x0D	; 13
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	91 50       	subi	r25, 0x01	; 1
 59e:	20 40       	sbci	r18, 0x00	; 0
 5a0:	80 40       	sbci	r24, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <main+0xa0>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0xaa>
 5a6:	00 00       	nop
		   _delay_ms(1000);
		   LCD_clear_screen();
 5a8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
		   break;
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <main+0xbc>
 5ae:	83 e0       	ldi	r24, 0x03	; 3
			   continue;
		   
	   }
	   
	   uint8_t c=3;
	   while (c--)
 5b0:	cf ef       	ldi	r28, 0xFF	; 255
 5b2:	c8 0f       	add	r28, r24
 5b4:	81 11       	cpse	r24, r1
 5b6:	d7 cf       	rjmp	.-82     	; 0x566 <main+0x6a>
		   LCD_WRITE_STRING("in system.");
		   _delay_ms(1000);
		   LCD_clear_screen();
		   break;
	   }
	    LCD_clear_screen();
 5b8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
	    LCD_WRITE_STRING("1)room 1");
 5bc:	81 ee       	ldi	r24, 0xE1	; 225
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
	    LCD_GOTO_XY(2,0);
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
	    LCD_WRITE_STRING("2)room 2");
 5cc:	8a ee       	ldi	r24, 0xEA	; 234
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
	  while (1)
	  {
		  key_pressed = Keypad_getkey();
 5d4:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getkey>
 5d8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <key_pressed>
		  switch(key_pressed){
 5dc:	81 34       	cpi	r24, 0x41	; 65
 5de:	d1 f3       	breq	.-12     	; 0x5d4 <main+0xd8>
			  case 'A':
			  break;
			  default:
			  UART_SEND(key_pressed);
 5e0:	0e 94 4c 03 	call	0x698	; 0x698 <UART_SEND>

			  // Expect a response
			  char received_data = UART_RECEIVE();
 5e4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <UART_RECEIVE>
			  
			  if (received_data == '1')
 5e8:	81 33       	cpi	r24, 0x31	; 49
 5ea:	79 f4       	brne	.+30     	; 0x60a <main+0x10e>
			  {
				  LCD_clear_screen();
 5ec:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
				 LCD_WRITE_STRING("1)led control");
 5f0:	83 ef       	ldi	r24, 0xF3	; 243
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
				 LCD_GOTO_XY(2,0);
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
				 LCD_WRITE_STRING("2)fan control");
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 608:	e5 cf       	rjmp	.-54     	; 0x5d4 <main+0xd8>
				  
			  }
			  else if (received_data == '+')
 60a:	8b 32       	cpi	r24, 0x2B	; 43
 60c:	79 f4       	brne	.+30     	; 0x62c <main+0x130>
			  {
				   LCD_clear_screen();
 60e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
				   LCD_WRITE_STRING("1)room 1");
 612:	81 ee       	ldi	r24, 0xE1	; 225
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
				   LCD_GOTO_XY(2,0);
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
				   LCD_WRITE_STRING("2)room 2");
 622:	8a ee       	ldi	r24, 0xEA	; 234
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 62a:	d4 cf       	rjmp	.-88     	; 0x5d4 <main+0xd8>
			  }
			  else if (received_data=='3')
 62c:	83 33       	cpi	r24, 0x33	; 51
 62e:	79 f4       	brne	.+30     	; 0x64e <main+0x152>
			  {
				  
				  LCD_clear_screen();
 630:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
				  	 LCD_WRITE_STRING("1)led on");
 634:	8f e0       	ldi	r24, 0x0F	; 15
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
					  LCD_GOTO_XY(2,0);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	82 e0       	ldi	r24, 0x02	; 2
 640:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
					  LCD_WRITE_STRING("2)led off");
 644:	88 e1       	ldi	r24, 0x18	; 24
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 64c:	c3 cf       	rjmp	.-122    	; 0x5d4 <main+0xd8>


			  }
			  else if  (received_data=='4')
 64e:	84 33       	cpi	r24, 0x34	; 52
 650:	79 f4       	brne	.+30     	; 0x670 <main+0x174>
			  {
				  LCD_clear_screen();
 652:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_clear_screen>
				  LCD_WRITE_STRING("1)fan on");
 656:	82 e2       	ldi	r24, 0x22	; 34
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
				  LCD_GOTO_XY(2,0);
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTO_XY>
				  LCD_WRITE_STRING("2)fan off");
 666:	8b e2       	ldi	r24, 0x2B	; 43
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 66e:	b2 cf       	rjmp	.-156    	; 0x5d4 <main+0xd8>


			  }
			   else if  (received_data=='0')
 670:	80 33       	cpi	r24, 0x30	; 48
 672:	09 f4       	brne	.+2      	; 0x676 <main+0x17a>
 674:	af cf       	rjmp	.-162    	; 0x5d4 <main+0xd8>
				   
			   }
			   
			  else
			  {
				  LCD_WRITE_STRING("Invalid Response");
 676:	85 e3       	ldi	r24, 0x35	; 53
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WRITE_STRING>
 67e:	aa cf       	rjmp	.-172    	; 0x5d4 <main+0xd8>

00000680 <UART_INIT>:
	//frame
	//one stop bit
	//8-bit

	// buad rate
	UCSRA&=~(1<<U2X);
 680:	8b b1       	in	r24, 0x0b	; 11
 682:	8d 7f       	andi	r24, 0xFD	; 253
 684:	8b b9       	out	0x0b, r24	; 11
	UBRRL=51;
 686:	83 e3       	ldi	r24, 0x33	; 51
 688:	89 b9       	out	0x09, r24	; 9
	
	//enable 
	UCSRB|=(1<<RXEN);
 68a:	8a b1       	in	r24, 0x0a	; 10
 68c:	80 61       	ori	r24, 0x10	; 16
 68e:	8a b9       	out	0x0a, r24	; 10
	UCSRB|=(1<<TXEN);
 690:	8a b1       	in	r24, 0x0a	; 10
 692:	88 60       	ori	r24, 0x08	; 8
 694:	8a b9       	out	0x0a, r24	; 10
 696:	08 95       	ret

00000698 <UART_SEND>:
}

void UART_SEND(uint8_t data){
	while (!(UCSRA&(1<<UDRE)));
 698:	5d 9b       	sbis	0x0b, 5	; 11
 69a:	fe cf       	rjmp	.-4      	; 0x698 <UART_SEND>
	UDR=data;
 69c:	8c b9       	out	0x0c, r24	; 12
 69e:	08 95       	ret

000006a0 <UART_RECEIVE>:
}

uint8_t UART_RECEIVE(void){
	while (!(UCSRA&(1<<RXC)));
 6a0:	5f 9b       	sbis	0x0b, 7	; 11
 6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <UART_RECEIVE>
	return UDR;
 6a4:	8c b1       	in	r24, 0x0c	; 12
	
}
 6a6:	08 95       	ret

000006a8 <strcmp>:
 6a8:	fb 01       	movw	r30, r22
 6aa:	dc 01       	movw	r26, r24
 6ac:	8d 91       	ld	r24, X+
 6ae:	01 90       	ld	r0, Z+
 6b0:	80 19       	sub	r24, r0
 6b2:	01 10       	cpse	r0, r1
 6b4:	d9 f3       	breq	.-10     	; 0x6ac <strcmp+0x4>
 6b6:	99 0b       	sbc	r25, r25
 6b8:	08 95       	ret

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
