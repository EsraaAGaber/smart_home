
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ae  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ab  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000946  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000594  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039c  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000034cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  8a:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <led1>:
{
		
			
			while (1)
			{
				char x =UART_RECEIVE();
  92:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_RECEIVE>
				if (x != 0)  // Ensure a valid character is received
  96:	88 23       	and	r24, r24
  98:	e1 f3       	breq	.-8      	; 0x92 <led1>
				{
					if (x == '1')
  9a:	81 33       	cpi	r24, 0x31	; 49
  9c:	59 f4       	brne	.+22     	; 0xb4 <led1+0x22>
					{
						MCAL_GPIO_Write_PIN(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	86 e3       	ldi	r24, 0x36	; 54
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
						UART_SEND('0');  // Send confirmation to the master that LED is ON
  ac:	80 e3       	ldi	r24, 0x30	; 48
  ae:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
  b2:	ef cf       	rjmp	.-34     	; 0x92 <led1>

						
					}
					else if (x == '2')
  b4:	82 33       	cpi	r24, 0x32	; 50
  b6:	59 f4       	brne	.+22     	; 0xce <led1+0x3c>
					{
						MCAL_GPIO_Write_PIN(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	86 e3       	ldi	r24, 0x36	; 54
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
						UART_SEND('0');  // Send confirmation to the master that LED is ON
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
  cc:	e2 cf       	rjmp	.-60     	; 0x92 <led1>

					}
					else if (x=='?')
  ce:	8f 33       	cpi	r24, 0x3F	; 63
  d0:	01 f7       	brne	.-64     	; 0x92 <led1>
					{
						UART_SEND('1');  // Send confirmation to the master
  d2:	81 e3       	ldi	r24, 0x31	; 49
  d4:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
  d8:	08 95       	ret

000000da <fan1>:
{
	//	MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
while (1)
{	
	
	char x = UART_RECEIVE();
  da:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_RECEIVE>
	if (x != 0)  // Ensure a valid character is received
  de:	88 23       	and	r24, r24
  e0:	e1 f3       	breq	.-8      	; 0xda <fan1>
	{
		if (x == '1')
  e2:	81 33       	cpi	r24, 0x31	; 49
  e4:	59 f4       	brne	.+22     	; 0xfc <fan1+0x22>
		{
			MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	89 e3       	ldi	r24, 0x39	; 57
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
			UART_SEND('0');  // Send confirmation to the master that LED is ON
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
  fa:	ef cf       	rjmp	.-34     	; 0xda <fan1>

		}
		else if (x == '2')
  fc:	82 33       	cpi	r24, 0x32	; 50
  fe:	59 f4       	brne	.+22     	; 0x116 <fan1+0x3c>
		{
			MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	89 e3       	ldi	r24, 0x39	; 57
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
			UART_SEND('0');  // Send confirmation to the master that LED is ON
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 114:	e2 cf       	rjmp	.-60     	; 0xda <fan1>

		}
		else if (x=='?')
 116:	8f 33       	cpi	r24, 0x3F	; 63
 118:	01 f7       	brne	.-64     	; 0xda <fan1>
		{
			UART_SEND('1');  // Send confirmation to the master
 11a:	81 e3       	ldi	r24, 0x31	; 49
 11c:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 120:	08 95       	ret

00000122 <room1>:
void room1(void)
{
		
			while (1)
			{
				char x = UART_RECEIVE();
 122:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_RECEIVE>
				if (x != 0)  // Ensure a valid character is received
 126:	88 23       	and	r24, r24
 128:	e1 f3       	breq	.-8      	; 0x122 <room1>
				{
					if (x == '1')
 12a:	81 33       	cpi	r24, 0x31	; 49
 12c:	31 f4       	brne	.+12     	; 0x13a <room1+0x18>
					{
						UART_SEND('3');  // Send confirmation to the master
 12e:	83 e3       	ldi	r24, 0x33	; 51
 130:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>

						led1();  // Handle room 1
 134:	0e 94 49 00 	call	0x92	; 0x92 <led1>
 138:	f4 cf       	rjmp	.-24     	; 0x122 <room1>
						
					}
					else if (x == '2')
 13a:	82 33       	cpi	r24, 0x32	; 50
 13c:	31 f4       	brne	.+12     	; 0x14a <room1+0x28>
					{
						UART_SEND('4');  // Send confirmation to the master
 13e:	84 e3       	ldi	r24, 0x34	; 52
 140:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>

						fan1();  // Handle room 2
 144:	0e 94 6d 00 	call	0xda	; 0xda <fan1>
 148:	ec cf       	rjmp	.-40     	; 0x122 <room1>
						
					}
					else if (x=='?')
 14a:	8f 33       	cpi	r24, 0x3F	; 63
 14c:	51 f7       	brne	.-44     	; 0x122 <room1>
					{
						UART_SEND('+');  // Send confirmation to the master
 14e:	8b e2       	ldi	r24, 0x2B	; 43
 150:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 154:	08 95       	ret

00000156 <led2>:
{
	
	
	while (1)
	{
		char x =UART_RECEIVE();
 156:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_RECEIVE>
		if (x != 0)  // Ensure a valid character is received
 15a:	88 23       	and	r24, r24
 15c:	e1 f3       	breq	.-8      	; 0x156 <led2>
		{
			if (x == '1')
 15e:	81 33       	cpi	r24, 0x31	; 49
 160:	59 f4       	brne	.+22     	; 0x178 <led2+0x22>
			{
				MCAL_GPIO_Write_PIN(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	86 e3       	ldi	r24, 0x36	; 54
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
				UART_SEND('0');  // Send confirmation to the master that LED is ON
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 176:	ef cf       	rjmp	.-34     	; 0x156 <led2>

				
			}
			else if (x == '2')
 178:	82 33       	cpi	r24, 0x32	; 50
 17a:	59 f4       	brne	.+22     	; 0x192 <led2+0x3c>
			{
				MCAL_GPIO_Write_PIN(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	86 e3       	ldi	r24, 0x36	; 54
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
				UART_SEND('0');  // Send confirmation to the master that LED is ON
 18a:	80 e3       	ldi	r24, 0x30	; 48
 18c:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 190:	e2 cf       	rjmp	.-60     	; 0x156 <led2>

			}
			else if (x=='?')
 192:	8f 33       	cpi	r24, 0x3F	; 63
 194:	01 f7       	brne	.-64     	; 0x156 <led2>
			{
				UART_SEND('1');  // Send confirmation to the master
 196:	81 e3       	ldi	r24, 0x31	; 49
 198:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 19c:	08 95       	ret

0000019e <fan2>:
{
	//	MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
	while (1)
	{
		
		char x = UART_RECEIVE();
 19e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_RECEIVE>
		if (x != 0)  // Ensure a valid character is received
 1a2:	88 23       	and	r24, r24
 1a4:	e1 f3       	breq	.-8      	; 0x19e <fan2>
		{
			if (x == '1')
 1a6:	81 33       	cpi	r24, 0x31	; 49
 1a8:	59 f4       	brne	.+22     	; 0x1c0 <fan2+0x22>
			{
				MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	89 e3       	ldi	r24, 0x39	; 57
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
				UART_SEND('0');  // Send confirmation to the master that LED is ON
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 1be:	ef cf       	rjmp	.-34     	; 0x19e <fan2>

			}
			else if (x == '2')
 1c0:	82 33       	cpi	r24, 0x32	; 50
 1c2:	59 f4       	brne	.+22     	; 0x1da <fan2+0x3c>
			{
				MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	63 e0       	ldi	r22, 0x03	; 3
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	89 e3       	ldi	r24, 0x39	; 57
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
				UART_SEND('0');  // Send confirmation to the master that LED is ON
 1d2:	80 e3       	ldi	r24, 0x30	; 48
 1d4:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 1d8:	e2 cf       	rjmp	.-60     	; 0x19e <fan2>

			}
			else if (x=='?')
 1da:	8f 33       	cpi	r24, 0x3F	; 63
 1dc:	01 f7       	brne	.-64     	; 0x19e <fan2>
			{
				UART_SEND('1');  // Send confirmation to the master
 1de:	81 e3       	ldi	r24, 0x31	; 49
 1e0:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 1e4:	08 95       	ret

000001e6 <room2>:
void room2(void)
{
	
	while (1)
	{
		char x = UART_RECEIVE();
 1e6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_RECEIVE>
		if (x != 0)  // Ensure a valid character is received
 1ea:	88 23       	and	r24, r24
 1ec:	e1 f3       	breq	.-8      	; 0x1e6 <room2>
		{
			if (x == '1')
 1ee:	81 33       	cpi	r24, 0x31	; 49
 1f0:	31 f4       	brne	.+12     	; 0x1fe <room2+0x18>
			{
				UART_SEND('3');  // Send confirmation to the master
 1f2:	83 e3       	ldi	r24, 0x33	; 51
 1f4:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>

				led2();  // Handle room 1
 1f8:	0e 94 ab 00 	call	0x156	; 0x156 <led2>
 1fc:	f4 cf       	rjmp	.-24     	; 0x1e6 <room2>
				
			}
			else if (x == '2')
 1fe:	82 33       	cpi	r24, 0x32	; 50
 200:	31 f4       	brne	.+12     	; 0x20e <room2+0x28>
			{
				UART_SEND('4');  // Send confirmation to the master
 202:	84 e3       	ldi	r24, 0x34	; 52
 204:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>

				fan2();  // Handle room 2
 208:	0e 94 cf 00 	call	0x19e	; 0x19e <fan2>
 20c:	ec cf       	rjmp	.-40     	; 0x1e6 <room2>
				
			}
			else if (x=='?')
 20e:	8f 33       	cpi	r24, 0x3F	; 63
 210:	51 f7       	brne	.-44     	; 0x1e6 <room2>
			{
				UART_SEND('+');  // Send confirmation to the master
 212:	8b e2       	ldi	r24, 0x2B	; 43
 214:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
 218:	08 95       	ret

0000021a <main>:




void main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	00 d0       	rcall	.+0      	; 0x220 <main+0x6>
 220:	00 d0       	rcall	.+0      	; 0x222 <main+0x8>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	ADC_voidInit();
 226:	0e 94 5f 01 	call	0x2be	; 0x2be <ADC_voidInit>
	//room1
	//led config.
	GPIO_PinConfig_t LED;
	LED.GPIO_PinNumber=GPIO_PIN_0;
 22a:	19 82       	std	Y+1, r1	; 0x01
	LED.GPIO_MODE=GPIO_MODE_Output;
 22c:	12 e0       	ldi	r17, 0x02	; 2
 22e:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_Init(GPIOB,&LED);
 230:	be 01       	movw	r22, r28
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	86 e3       	ldi	r24, 0x36	; 54
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 80 01 	call	0x300	; 0x300 <MCAL_GPIO_Init>
	
	//Fan config.
	GPIO_PinConfig_t FAN={GPIO_PIN_1,GPIO_MODE_Output};
 23e:	01 e0       	ldi	r16, 0x01	; 1
 240:	0b 83       	std	Y+3, r16	; 0x03
 242:	1c 83       	std	Y+4, r17	; 0x04
	MCAL_GPIO_Init(GPIOA,&FAN);
 244:	be 01       	movw	r22, r28
 246:	6d 5f       	subi	r22, 0xFD	; 253
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	89 e3       	ldi	r24, 0x39	; 57
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 80 01 	call	0x300	; 0x300 <MCAL_GPIO_Init>
	MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	89 e3       	ldi	r24, 0x39	; 57
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
	//uint16_t t_value= ADC_u16GetChannalResult(ADC_CHANNAL_0);
	//t_value=(t_value*5000.0)/10230;
	//room2
	//led config.
	
	LED.GPIO_PinNumber=GPIO_PIN_1;
 260:	09 83       	std	Y+1, r16	; 0x01
	LED.GPIO_MODE=GPIO_MODE_Output;
 262:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_Init(GPIOB,&LED);
 264:	be 01       	movw	r22, r28
 266:	6f 5f       	subi	r22, 0xFF	; 255
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	86 e3       	ldi	r24, 0x36	; 54
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 80 01 	call	0x300	; 0x300 <MCAL_GPIO_Init>
	
	//Fan config.
	FAN.GPIO_PinNumber=GPIO_PIN_3;
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	8b 83       	std	Y+3, r24	; 0x03
	FAN.GPIO_MODE=GPIO_MODE_Output;
 276:	1c 83       	std	Y+4, r17	; 0x04
	MCAL_GPIO_Init(GPIOA,&FAN);
 278:	be 01       	movw	r22, r28
 27a:	6d 5f       	subi	r22, 0xFD	; 253
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	89 e3       	ldi	r24, 0x39	; 57
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 80 01 	call	0x300	; 0x300 <MCAL_GPIO_Init>
	MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	89 e3       	ldi	r24, 0x39	; 57
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Write_PIN>
	//uint16_t t_value= ADC_u16GetChannalResult(ADC_CHANNAL_2);
	//t_value=(t_value*5000.0)/10230;
	
	
	//enable uart 
	UART_INIT();
 294:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <UART_INIT>
     while (1)
     {
	     char x = UART_RECEIVE();  // Non-blocking receive
 298:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_RECEIVE>
	     if (x != 0)  // Ensure a valid character is received
 29c:	88 23       	and	r24, r24
 29e:	e1 f3       	breq	.-8      	; 0x298 <main+0x7e>
	     {
			 
		     if (x == '1')
 2a0:	81 33       	cpi	r24, 0x31	; 49
 2a2:	29 f4       	brne	.+10     	; 0x2ae <main+0x94>
		     {
			     UART_SEND('1');  // Send confirmation to the master
 2a4:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
			     room1();         // Handle room 1
 2a8:	0e 94 91 00 	call	0x122	; 0x122 <room1>
 2ac:	f5 cf       	rjmp	.-22     	; 0x298 <main+0x7e>
		     }
		     else if (x == '2')
 2ae:	82 33       	cpi	r24, 0x32	; 50
 2b0:	99 f7       	brne	.-26     	; 0x298 <main+0x7e>
		     {
			     UART_SEND('1');  // Send confirmation to the master
 2b2:	81 e3       	ldi	r24, 0x31	; 49
 2b4:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_SEND>
			     room2();         // Handle room 2
 2b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <room2>
 2bc:	ed cf       	rjmp	.-38     	; 0x298 <main+0x7e>

000002be <ADC_voidInit>:
void ADC_voidInit(void){
#if ADC_Enable_Status==ADC_ENABLE
    #if ADC_Vref==ADC_AREF_INTERNAL_Vref_TURNED_OFF
	    CLR_BIT(ADMUX,7); CLR_BIT(ADMUX,6);
    #elif ADC_Vref==ADC_AVCC
       CLR_BIT(ADMUX,7); SET_BIT(ADMUX,6);
 2be:	87 b1       	in	r24, 0x07	; 7
 2c0:	8f 77       	andi	r24, 0x7F	; 127
 2c2:	87 b9       	out	0x07, r24	; 7
 2c4:	87 b1       	in	r24, 0x07	; 7
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	87 b9       	out	0x07, r24	; 7
    #endif

    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
       SET_BIT(ADMUX,5);
    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
       CLR_BIT(ADMUX,5);
 2ca:	87 b1       	in	r24, 0x07	; 7
 2cc:	8f 7d       	andi	r24, 0xDF	; 223
 2ce:	87 b9       	out	0x07, r24	; 7
    #endif

    #if ADC_Channal>=ADC_CHANNAL_0&&ADC_Channal<=ADC_CHANNAL_7
      ADMUX|=ADC_Channal;
 2d0:	87 b1       	in	r24, 0x07	; 7
 2d2:	87 b9       	out	0x07, r24	; 7


    #if ADC_Trigger==ADC_SINGLE_CONVERSION
      CLR_BIT(ADCSRA,5);
    #elif ADC_Trigger==ADC_FREE_RUNNING_MODE
      SET_BIT(ADCSRA,5);
 2d4:	86 b1       	in	r24, 0x06	; 6
 2d6:	80 62       	ori	r24, 0x20	; 32
 2d8:	86 b9       	out	0x06, r24	; 6
      CLR_BIT(SFIOR,7); CLR_BIT(SFIOR,6); CLR_BIT(SFIOR,5);
 2da:	80 b7       	in	r24, 0x30	; 48
 2dc:	8f 77       	andi	r24, 0x7F	; 127
 2de:	80 bf       	out	0x30, r24	; 48
 2e0:	80 b7       	in	r24, 0x30	; 48
 2e2:	8f 7b       	andi	r24, 0xBF	; 191
 2e4:	80 bf       	out	0x30, r24	; 48
 2e6:	80 b7       	in	r24, 0x30	; 48
 2e8:	8f 7d       	andi	r24, 0xDF	; 223
 2ea:	80 bf       	out	0x30, r24	; 48


    #if ADC_Inturrupt_Mode==ADC_INTERRUPT_ENABLE
      SET_BIT(ADCSRA,3);
    #elif ADC_Inturrupt_Mode==ADC_INTERRUPT_DISABLE
      CLR_BIT(ADCSRA,3);
 2ec:	86 b1       	in	r24, 0x06	; 6
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	86 b9       	out	0x06, r24	; 6
    #endif

    #if ADC_Prescallur>=ADC_PRESCALLER_2 && ADC_Prescallur<=ADC_PRESCALLER_128
        ADCSRA |= ADC_Prescallur;
 2f2:	86 b1       	in	r24, 0x06	; 6
 2f4:	87 60       	ori	r24, 0x07	; 7
 2f6:	86 b9       	out	0x06, r24	; 6
    #else
          #warning"wrong prescaler"

    #endif

   SET_BIT(ADCSRA,7);
 2f8:	86 b1       	in	r24, 0x06	; 6
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	86 b9       	out	0x06, r24	; 6
 2fe:	08 95       	ret

00000300 <MCAL_GPIO_Init>:
 * Note			-none
 */
uint16_t MCAL_GPIO_Read_PORT(GPIO_TypeDef * GPIOx )
{
	return GPIOx->PIN;
}
 300:	fc 01       	movw	r30, r24
 302:	db 01       	movw	r26, r22
 304:	11 96       	adiw	r26, 0x01	; 1
 306:	8c 91       	ld	r24, X
 308:	11 97       	sbiw	r26, 0x01	; 1
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	61 f4       	brne	.+24     	; 0x326 <MCAL_GPIO_Init+0x26>
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0c 90       	ld	r0, X
 314:	02 c0       	rjmp	.+4      	; 0x31a <MCAL_GPIO_Init+0x1a>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <MCAL_GPIO_Init+0x16>
 31e:	91 81       	ldd	r25, Z+1	; 0x01
 320:	89 2b       	or	r24, r25
 322:	81 83       	std	Z+1, r24	; 0x01
 324:	08 95       	ret
 326:	81 11       	cpse	r24, r1
 328:	17 c0       	rjmp	.+46     	; 0x358 <MCAL_GPIO_Init+0x58>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	9c 01       	movw	r18, r24
 330:	0c 90       	ld	r0, X
 332:	02 c0       	rjmp	.+4      	; 0x338 <MCAL_GPIO_Init+0x38>
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <MCAL_GPIO_Init+0x34>
 33c:	20 95       	com	r18
 33e:	31 81       	ldd	r19, Z+1	; 0x01
 340:	23 23       	and	r18, r19
 342:	21 83       	std	Z+1, r18	; 0x01
 344:	0c 90       	ld	r0, X
 346:	02 c0       	rjmp	.+4      	; 0x34c <MCAL_GPIO_Init+0x4c>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <MCAL_GPIO_Init+0x48>
 350:	92 81       	ldd	r25, Z+2	; 0x02
 352:	89 2b       	or	r24, r25
 354:	82 83       	std	Z+2, r24	; 0x02
 356:	08 95       	ret
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	b9 f4       	brne	.+46     	; 0x38a <MCAL_GPIO_Init+0x8a>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	9c 01       	movw	r18, r24
 362:	0c 90       	ld	r0, X
 364:	02 c0       	rjmp	.+4      	; 0x36a <MCAL_GPIO_Init+0x6a>
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <MCAL_GPIO_Init+0x66>
 36e:	20 95       	com	r18
 370:	31 81       	ldd	r19, Z+1	; 0x01
 372:	23 23       	and	r18, r19
 374:	21 83       	std	Z+1, r18	; 0x01
 376:	0c 90       	ld	r0, X
 378:	02 c0       	rjmp	.+4      	; 0x37e <MCAL_GPIO_Init+0x7e>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <MCAL_GPIO_Init+0x7a>
 382:	80 95       	com	r24
 384:	92 81       	ldd	r25, Z+2	; 0x02
 386:	89 23       	and	r24, r25
 388:	82 83       	std	Z+2, r24	; 0x02
 38a:	08 95       	ret

0000038c <MCAL_GPIO_Write_PIN>:
 * @param [in]  	-pin value @ref GPIO_PIN_State
 * @retval 		-none
 * Note			-none
 */
void   MCAL_GPIO_Write_PIN(GPIO_TypeDef * GPIOx , uint16_t Pin_Number,uint8_t Value){
	if (Value==GPIO_PIN_SET)
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	61 f4       	brne	.+24     	; 0x3a8 <MCAL_GPIO_Write_PIN+0x1c>
	{
		GPIOx->PORT|=1<<(Pin_Number);
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <MCAL_GPIO_Write_PIN+0xe>
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <MCAL_GPIO_Write_PIN+0xa>
 39e:	fc 01       	movw	r30, r24
 3a0:	32 81       	ldd	r19, Z+2	; 0x02
 3a2:	23 2b       	or	r18, r19
 3a4:	22 83       	std	Z+2, r18	; 0x02
 3a6:	08 95       	ret
	}
	else GPIOx->PORT&=~(1<<(Pin_Number));
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <MCAL_GPIO_Write_PIN+0x26>
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <MCAL_GPIO_Write_PIN+0x22>
 3b6:	20 95       	com	r18
 3b8:	fc 01       	movw	r30, r24
 3ba:	32 81       	ldd	r19, Z+2	; 0x02
 3bc:	23 23       	and	r18, r19
 3be:	22 83       	std	Z+2, r18	; 0x02
 3c0:	08 95       	ret

000003c2 <UART_INIT>:
	//frame
	//one stop bit
	//8-bit

	// buad rate
	UCSRA&=~(1<<U2X);
 3c2:	8b b1       	in	r24, 0x0b	; 11
 3c4:	8d 7f       	andi	r24, 0xFD	; 253
 3c6:	8b b9       	out	0x0b, r24	; 11
	UBRRL=51;
 3c8:	83 e3       	ldi	r24, 0x33	; 51
 3ca:	89 b9       	out	0x09, r24	; 9
	
	//enable 
	UCSRB|=(1<<RXEN);
 3cc:	8a b1       	in	r24, 0x0a	; 10
 3ce:	80 61       	ori	r24, 0x10	; 16
 3d0:	8a b9       	out	0x0a, r24	; 10
	UCSRB|=(1<<TXEN);
 3d2:	8a b1       	in	r24, 0x0a	; 10
 3d4:	88 60       	ori	r24, 0x08	; 8
 3d6:	8a b9       	out	0x0a, r24	; 10
 3d8:	08 95       	ret

000003da <UART_SEND>:
}

void UART_SEND(uint8_t data){
	while (!(UCSRA&(1<<UDRE)));
 3da:	5d 9b       	sbis	0x0b, 5	; 11
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <UART_SEND>
	UDR=data;
 3de:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	83 ed       	ldi	r24, 0xD3	; 211
 3e2:	90 e3       	ldi	r25, 0x30	; 48
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <UART_SEND+0xa>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <UART_SEND+0x10>
 3ea:	00 00       	nop
 3ec:	08 95       	ret

000003ee <UART_RECEIVE>:
	    _delay_ms(50);  // Add a small delay between transmissions

}

uint8_t UART_RECEIVE(void){
	while (!(UCSRA&(1<<RXC)));
 3ee:	5f 9b       	sbis	0x0b, 7	; 11
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <UART_RECEIVE>
	return UDR;
 3f2:	8c b1       	in	r24, 0x0c	; 12
	
}
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
